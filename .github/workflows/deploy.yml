# Secrets required to be in place:
# - AZURE_CREDENTIALS -

name: Build and Deploy Application

env:
  DEPLOYMENT_NAME: "springboot-demo"
  DEPLOYMENT_REGION: "eastus"
  ACR_NAME: "colinmac001"
  CLUSTER_NAME: "aks-cluster"
  CLUSTER_RG: "demo"

on:
  # Triggers the workflow on push events on the main branch
  # push:
  #   branches: [ main ]
  #   paths-ignore:
  #     - '*.md'

  # We also want to be able to run this manually from Github
  workflow_dispatch:

jobs:
  build_and_push_java_image: # Build the Java Application image and push to ACR
     runs-on: ubuntu-latest
     steps:
     - name: Login to Azure 
       uses: azure/login@v1
       with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        environment: 'AzureCloud'
        enable-AzPSSession: false

     - name: checkout code
       uses: actions/checkout@v3

     - name: Set up JDK 17
       uses: actions/setup-java@v3
       with:
          java-version: '17'
          distribution: 'adopt'

     # Build Java Application    
     - name: Build with Maven, compile and build the Docker image
       run: |
        mvn spring-boot:build-image -Dmodule.image.name=spring-demo -Dmodule.image.repo=${{ env.ACR_NAME }}.azurecr.io

     # Azure Powershell Cli - ACR Login, Tag Image, Push Image
     - name: Azure Powershell Cli - ACR Login, Tag Image, Push Image
       uses: azure/powershell@v1
       with:
        inlineScript: |
         #!/bin/bash
         az acr login --name ${{ env.ACR_NAME }}
         docker push ${{ env.ACR_NAME }}.azurecr.io/spring-demo:latest
        azPSVersion: "latest"

  # update_kubernetes: 
  #    runs-on: ubuntu-latest
  #    needs: build_and_push_java_image
  #    steps:
  #    - name: Set the target AKS cluster.
  #      uses: Azure/aks-set-context@v1
  #      with:
  #       creds: '${{ secrets.AZURE_CREDENTIALS }}'
  #       cluster-name: ${{ env.CLUSTER_NAME }}
  #       resource-group: ${{ env.CLUSTER_RG }}

  #    - name: Azure Powershell Cli - Update ACR, Attach ACR to Cluster, Create Service and Expose the Pod
  #      uses: azure/powershell@v1
  #      with:
  #       inlineScript: |
  #        #!/bin/bash
  #        az aks get-credentials --resource-group petclinicaks-amrg --name ${{ env.CLUSTER_NAME }}
  #        az aks update --resource-group=petclinicaks-amrg --name=${{ env.CLUSTER_NAME }} --attach-acr ${{ env.ACR_NAME }}
  #        kubectl run petclinicaks --image=petclinicaksacr.azurecr.io/petclinic:latest
  #        kubectl expose pod petclinicaks --type=LoadBalancer --port=80 --target-port=8080
  #        kubectl get pods -A
  #        kubectl get services -o=jsonpath='{.items[*].status.loadBalancer.ingress[0].ip}'
  #       azPSVersion: "latest"
